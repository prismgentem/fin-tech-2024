plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
    id 'org.sonarqube' version '4.0.0.2929'
}

sonarqube {
    properties {
        property "sonar.projectKey", "prismgentem_fin-tech-2024"
        property "sonar.organization", "prismgentem"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

group = 'org.example'
version = '1.0.0'

jar {
    archiveBaseName.set('crud-kuda-go')
    archiveVersion.set('')
    archiveClassifier.set('')
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.aspectj:aspectjweaver'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.0'
    testImplementation 'org.wiremock.integrations.testcontainers:wiremock-testcontainers-module:1.0-alpha-13'
    implementation project(':log-execution-starter')
}

tasks.named('test', Test) {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        'org/example/crudkudago/model/**',
                        'org/example/crudkudago/mapper/**',
                        'org/example/crudkudago/entity/**'
                ])
            })
    )
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.50
            }
            classDirectories.setFrom(
                    files(classDirectories.files.collect {
                        fileTree(dir: it, exclude: [
                                'org/example/crudkudago/model/**',
                                'org/example/crudkudago/mapper/**',
                                'org/example/crudkudago/entity/**'
                        ])
                    })
            )
        }
    }
}

// Проверка покрытия выполняется только при запуске `check`
check.dependsOn jacocoTestReport, jacocoTestCoverageVerification
